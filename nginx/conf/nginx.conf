worker_processes  auto;
worker_rlimit_nofile 8192;

events {
  worker_connections  4096;
}

http {
  include    /etc/nginx/proxy.conf;
  include    /etc/nginx/fastcgi.conf;

  server {
    listen  80 default_server;
    listen  [::]:80 default_server;
    server_name inbook.azurewebsites.net www.inbook.azurewebsites.net;
    location / {
      proxy_pass      http://backend:4000/;
    }
    location /keycloak {
      proxy_pass      http://keycloak:8080/;
    }
    location /welcome-content {
      proxy_pass      http://keycloak:8080/welcome-content;
    }
    location /admin {            
      proxy_pass      http://keycloak:8080/admin;
    }
    location /realms {
      proxy_pass      http://keycloak:8080/realms;
    }
    location /resources {
      proxy_pass      http://keycloak:8080/resources;
    }
  }
  server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name inbook.azurewebsites.net;

    # Protect against the BEAST attack by not using SSLv3 at all. If you need to support older browsers (IE6) you may need to add
    # SSLv3 to the list of protocols below.
    ssl_protocols              TLSv1.2;

    # Ciphers set to best allow protection from Beast, while providing forwarding secrecy, as defined by Mozilla - https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx
    ssl_ciphers                ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:ECDHE-RSA-RC4-SHA:ECDHE-ECDSA-RC4-SHA:AES128:AES256:RC4-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!3DES:!MD5:!PSK;
    ssl_prefer_server_ciphers  on;

    # Optimize TLS/SSL by caching session parameters for 10 minutes. This cuts down on the number of expensive TLS/SSL handshakes.
    # The handshake is the most CPU-intensive operation, and by default it is re-negotiated on every new/parallel connection.
    # By enabling a cache (of type "shared between all Nginx workers"), we tell the client to re-use the already negotiated state.
    # Further optimization can be achieved by raising keepalive_timeout, but that shouldn't be done unless you serve primarily HTTPS.
    ssl_session_cache    shared:SSL:10m; # a 1mb cache can hold about 4000 sessions, so we can hold 40000 sessions
    ssl_session_timeout  24h;


    # Use a higher keepalive timeout to reduce the need for repeated handshakes
    keepalive_timeout 300; # up from 75 secs default

    # remember the certificate for a year and automatically connect to HTTPS
    add_header Strict-Transport-Security 'max-age=31536000; includeSubDomains';
    ssl_certificate /etc/nginx/ssl/ssl.crt;
    ssl_certificate_key /etc/nginx/ssl/ssl.key;

    location / {
      proxy_pass      https://backend:4000/;
    }
    location /keycloak {
      proxy_pass      https://keycloak:8080/;
    }
    location /welcome-content {
      proxy_pass      https://keycloak:8080/welcome-content;
    }
    location /admin {            
      proxy_pass      https://keycloak:8080/admin;
    }
    location /realms {
      proxy_pass      https://keycloak:8080/realms;
    }
    location /resources {
      proxy_pass      https://keycloak:8080/resources;
    }
  }
}